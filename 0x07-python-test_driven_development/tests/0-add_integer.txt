The ``0-add_integer`` module
======================

using ``add_integer``
-------------------

Importing the function from the module:
        >>> add_integer = __import__("0-add_integer").add_integer

checking for module docstring:
        >>> m = __import__("0-add_integer").__doc__
        >>> len(m) > 1
        True

checking for function docstring:
        >>> f = __import__("0-add_integer").add_integer.__doc__
        >>> len(f) > 1
        True

checking regular addition:
        >>> add_integer(2, 3)
        5

checking positive with negative:
        >>> add_integer(2, -4)
        -2

checking negative with positive:
        >>> add_integer(-6, 8)
        2

checking addition over multiple values:
        >>> [add_integer(i, i ** 2) for i in range(6)]
        [0, 2, 6, 12, 20, 30]

checking float with int:
        >>> add_integer(2.1, 4)
        6

checking int with float:
        >>> add_integer(5, 7.8)
        12

checking for passed inf:
        >>> add_integer(1, float('inf'))
        Traceback (most recent call last):
        ...
        OverflowError: cannot convert float infinity to integer

checking for passed NaN:
        >>> add_integer(1, float('NaN'))
        Traceback (most recent call last):
        ...
        ValueError: cannot convert float NaN to integer

checking super long int:
        >>> add_integer(999999999999999999999999999999,1)
        1000000000000000000000000000000

checking non-number with number:
        >>> add_integer([1], 2)
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

checking number with non-number:
        >>> add_integer(3, "2")
        Traceback (most recent call last):
        ...
        TypeError: b must be an integer

checking non-number with non-number:
        >>> add_integer((2,), {"key": "value"})
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

checking bool with number:
        >>> add_integer(True, 1)
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

checking number with bool:
        >>> add_integer(0, False)
        Traceback (most recent call last):
        ...
        TypeError: b must be an integer

checking no args:
        >>> add_integer()
        Traceback (most recent call last):
        ...
        TypeError: add_integer() missing 1 required positional argument: 'a'

checking one arg:
        >>> add_integer(1)
        99

checking more than 2 args:
        >>> add_integer(1, 2, 3)
        Traceback (most recent call last):
        ...
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
